name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/contacts_test

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            junit.xml
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        
      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d contacts_test -c "
            CREATE TABLE IF NOT EXISTS contacts (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              email VARCHAR(255) UNIQUE NOT NULL,
              phone VARCHAR(20),
              message TEXT,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
          "
        
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/
            junit.xml
          retention-days: 30

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        
      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d contacts_test -c "
            CREATE TABLE IF NOT EXISTS contacts (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              email VARCHAR(255) UNIQUE NOT NULL,
              phone VARCHAR(20),
              message TEXT,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
          "
        
      - name: Run API tests
        run: npm run test:api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          
      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            coverage/
            junit.xml
          retention-days: 30

  keploy-tests:
    name: Keploy API Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Install Keploy
        run: |
          curl --silent --location "https://github.com/keploy/keploy/releases/latest/download/keploy_linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/keploy /usr/local/bin
          
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        
      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d contacts_test -c "
            CREATE TABLE IF NOT EXISTS contacts (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              email VARCHAR(255) UNIQUE NOT NULL,
              phone VARCHAR(20),
              message TEXT,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
          "
        
      - name: Check for existing Keploy tests
        id: check-keploy-tests
        run: |
          if [ -d "keploy/test-sets" ] && [ "$(ls -A keploy/test-sets)" ]; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
            echo "Found existing Keploy tests"
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
            echo "No existing Keploy tests found"
          fi
        
      - name: Run Keploy tests
        if: steps.check-keploy-tests.outputs.has_tests == 'true'
        run: |
          # Start the application in background
          DATABASE_URL="${{ env.DATABASE_URL }}" npm start &
          APP_PID=$!
          
          # Wait for application to start
          timeout 60s bash -c 'until curl -f http://localhost:3000/api/contacts; do sleep 2; done'
          
          # Run Keploy tests
          keploy test --delay 10
          
          # Clean up
          kill $APP_PID
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          
      - name: Generate Keploy test data (if no tests exist)
        if: steps.check-keploy-tests.outputs.has_tests == 'false'
        run: |
          echo "No existing Keploy tests found. Skipping Keploy testing."
          echo "To generate tests, run 'npm run keploy:record' locally and commit the test data."
          
      - name: Upload Keploy results
        uses: actions/upload-artifact@v4
        if: always() && steps.check-keploy-tests.outputs.has_tests == 'true'
        with:
          name: keploy-test-results
          path: |
            keploy/
          retention-days: 30

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests]
    if: always()
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        
      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d contacts_test -c "
            CREATE TABLE IF NOT EXISTS contacts (
              id SERIAL PRIMARY KEY,
              name VARCHAR(255) NOT NULL,
              email VARCHAR(255) UNIQUE NOT NULL,
              phone VARCHAR(20),
              message TEXT,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
          "
        
      - name: Run all tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          
      - name: Generate coverage report
        run: npm run test:coverage-report
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const { lines, statements, functions, branches } = coverage.total;
              
              const comment = `## 📊 Test Coverage Report
              
              | Metric | Coverage |
              |--------|----------|
              | **Lines** | ${lines.pct}% (${lines.covered}/${lines.total}) |
              | **Statements** | ${statements.pct}% (${statements.covered}/${statements.total}) |
              | **Functions** | ${functions.pct}% (${functions.covered}/${functions.total}) |
              | **Branches** | ${branches.pct}% (${branches.covered}/${branches.total}) |
              
              ${lines.pct >= 70 ? '✅' : '⚠️'} Target coverage: 70% minimum
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  build-and-deploy:
    name: Build and Deploy Check
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests, api-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 30
          
      - name: Build Docker image (if Dockerfile exists)
        if: hashFiles('Dockerfile') != ''
        run: |
          docker build -t contacts-api:${{ github.sha }} .
          docker save contacts-api:${{ github.sha }} | gzip > contacts-api.tar.gz
          
      - name: Upload Docker image
        if: hashFiles('Dockerfile') != ''
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: contacts-api.tar.gz
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run security scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3 